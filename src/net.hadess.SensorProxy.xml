<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">

<node>

  <!--
      net.hadess.SensorProxy:
      @short_description: D-Bus proxy to access hardware sensors

      After checking the availability of the sensor type you want to monitor,
      call the net.hadess.SensorProxy.ClaimAccelerometer() or the
      net.hadess.SensorProxy.ClaimLight() method to start updating the properties
      from the hardware readings.
  -->
  <interface name="net.hadess.SensorProxy">
    <!--
        HasAccelerometer:

        Whether a supported accelerometer is present on the system.
    -->
    <property name="HasAccelerometer" type="b" access="read"/>

    <!--
        AccelerometerOrientation:

        The detected orientation of the tablet or laptop.
        Possible values are:
        - undefined
        - normal
        - bottom-up
        - left-up
        - right-up
    -->
    <property name="AccelerometerOrientation" type="s" access="read"/>

    <!--
        HasAmbientLight:

        Whether a supported ambient light sensor is present on the system.
    -->
    <property name="HasAmbientLight" type="b" access="read"/>

    <!--
        LightLevelUnit:

        The unit used in Ambient Light Sensor readings. It is
        one of either "lux" or "vendor".

        Note that different hardware will have different readings in the
        same condition, so values should be taken as relative.

        When the unit is "vendor", readings will be a percentage with 100% being the
        maximum reading.
    -->
    <property name="LightLevelUnit" type="s" access="read"/>

    <!--
        LightLevel:

        The ambient light sensor reading, in the unit exported in the
        "LightLevelUnit" property.
    -->
    <property name="LightLevel" type="d" access="read"/>

    <!--
       ClaimAccelerometer:

       To start receiving accelerometer reading updates from the proxy, the application
       must call the net.hadess.SensorProxy.ClaimAccelerometer() method. It can do so
       whether an accelerometer is available or not, updates would then be sent when an
       accelerometer appears.

       Applications should call net.hadess.SensorProxy.ReleaseAccelerometer() when
       readings are not required anymore. For example, an application that monitors
       the orientation of the main screen should stop monitoring for updates when that
       screen has been turned off.

       This prevents the sensor proxy from polling the device, thus increasing wake-ups
       and reducing battery life.
    -->
    <method name="ClaimAccelerometer"/>

    <!--
        ReleaseAccelerometer:

        This should be called as soon as readings are not required anymore. Note
        that resources are freed up if a monitoring application exits without
        calling net.hadess.SensorProxy.Release(), crashes or the sensor disappears.
    -->
    <method name="ReleaseAccelerometer"/>

    <!--
       ClaimLight:

       To start receiving ambient light sensor reading updates from the proxy, the
       application must call the net.hadess.SensorProxy.ClaimLight() method. It can do so
       whether an ambient light sensor is available or not, updates would then be sent
       when such a sensor appears.

       Applications should call net.hadess.SensorProxy.ReleaseLight() when readings are
       not required anymore. For example, an application that monitors the ambient light
       to change the screen brightness should stop monitoring for updates when that screen
       has been turned off.

       This prevents the sensor proxy from polling the device, thus increasing wake-ups
       and reducing battery life.
    -->
    <method name="ClaimLight"/>

    <!--
        ReleaseLight:

        This should be called as soon as readings are not required anymore. Note
        that resources are freed up if a monitoring application exits without
        calling net.hadess.SensorProxy.Release(), crashes or the sensor disappears.
    -->
    <method name="ReleaseLight"/>

  </interface>
</node>
